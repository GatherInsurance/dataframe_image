{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dataframe_image \u00b6 A package to convert Jupyter Notebooks to PDF and/or Markdown embedding pandas DataFrames as images. Overview \u00b6 When converting Jupyter Notebooks to pdf using nbconvert, pandas DataFrames appear as either raw text or as simple LaTeX tables. The left side of the image below shows this representation. This package was first created to embed DataFrames into pdf and markdown documents as images so that they appear exactly as they do in Jupyter Notebooks, as seen from the right side of the image above. It has since added much more functionality. Usage \u00b6 Upon installation, the option DataFrame as Image (PDF or Markdown) will appear in the menu File -> Download as . Clicking this option will open up a new browser tab with a short form to be completed. Exporting individual DataFrames \u00b6 dataframe_image has the ability to export both normal and styled DataFrames as images from within a Python script. Pass your normal or styled DataFrame to the export function along with a file location to save it as an image. >>> import dataframe_image as dfi >>> dfi . export ( df_styled , 'df_styled.png' ) You may also export directly from the DataFrame or styled DataFrame using the dfi.export and export_png methods, respectively. >>> df . dfi . export ( 'df.png' ) >>> df_styled . export_png ( 'df_styled.png) Here, an example of how exporting a DataFrame would look like in a notebook. Installation \u00b6 Install with either: pip install dataframe_image conda install -c conda-forge dataframe_image PDF Conversion - LaTeX vs Chrome Browser \u00b6 By default, conversion to pdf happens via LaTeX, which you must have pre-installed on your machine. If you do not have the correct LaTeX installation, you'll need to select the Chrome Browser option to make the conversion. Conversion via Chrome browser is much quicker and will look very different than the LaTeX rendition. The chrome browser version will look nearly the same as it does in your browser, while the LaTeX version looking more like a book/article. Consult nbconvert's documentation to learn how to get LaTeX installed correctly on your machine. More features \u00b6 Below, is a description of other features from dataframe_image: Embeds all images from markdown cells (inline, reference, attachments, and <img> tags) into the pdf Saves the new documents anywhere in your filesystem and correctly link the resources Converts gifs to single-frame png files allowing them to be embedded into the pdf As a Python Library \u00b6 dataframe_image can also be used outside of the notebook as a normal Python library. In a separate Python script, import the dataframe_image package and pass the file name of your notebook to the convert function. >>> import dataframe_image as dfi >>> dfi . convert ( 'path/to/your_notebook.ipynb' , to = 'pdf' , use = 'latex' , center_df = True , max_rows = 30 , max_cols = 10 , execute = False , save_notebook = False , limit = None , document_name = None , table_conversion = 'chrome' chrome_path = None , latex_command = None , output_dir = None , ) By default, the new file(s) will be saved in the same directory where the notebook resides. Do not run this command within the same notebook that is being converted. From the Command Line \u00b6 The command line tool dataframe_image will be available upon installation with the same options as the convert function from above. dataframe_image --to = pdf \"my notebook with dataframes.ipynb\" Finding Google Chrome \u00b6 You must have Google Chrome (or Brave) installed in order for dataframe_image to work. The path to Chrome should automatically be found. If Chrome is not in a standard location, set it with the chrome_path parameter. Using matplotlib instead of Chrome \u00b6 If you do not have Chrome installed or cannot get it to work properly, you can alternatively use matplotlib to convert the DataFrames to images. Select this option by setting the table_conversion parameter to 'matplotlib' . Publish to Medium \u00b6 Closely related to this package is jupyter_to_medium , which publishes your notebooks directly and quickly as Medium blog posts. Dependencies \u00b6 You must have the following Python libraries installed: pandas nbconvert requests matplotlib BeautifulSoup aiohttp","title":"Home"},{"location":"#dataframe_image","text":"A package to convert Jupyter Notebooks to PDF and/or Markdown embedding pandas DataFrames as images.","title":"dataframe_image"},{"location":"#overview","text":"When converting Jupyter Notebooks to pdf using nbconvert, pandas DataFrames appear as either raw text or as simple LaTeX tables. The left side of the image below shows this representation. This package was first created to embed DataFrames into pdf and markdown documents as images so that they appear exactly as they do in Jupyter Notebooks, as seen from the right side of the image above. It has since added much more functionality.","title":"Overview"},{"location":"#usage","text":"Upon installation, the option DataFrame as Image (PDF or Markdown) will appear in the menu File -> Download as . Clicking this option will open up a new browser tab with a short form to be completed.","title":"Usage"},{"location":"#exporting-individual-dataframes","text":"dataframe_image has the ability to export both normal and styled DataFrames as images from within a Python script. Pass your normal or styled DataFrame to the export function along with a file location to save it as an image. >>> import dataframe_image as dfi >>> dfi . export ( df_styled , 'df_styled.png' ) You may also export directly from the DataFrame or styled DataFrame using the dfi.export and export_png methods, respectively. >>> df . dfi . export ( 'df.png' ) >>> df_styled . export_png ( 'df_styled.png) Here, an example of how exporting a DataFrame would look like in a notebook.","title":"Exporting individual DataFrames"},{"location":"#installation","text":"Install with either: pip install dataframe_image conda install -c conda-forge dataframe_image","title":"Installation"},{"location":"#pdf-conversion-latex-vs-chrome-browser","text":"By default, conversion to pdf happens via LaTeX, which you must have pre-installed on your machine. If you do not have the correct LaTeX installation, you'll need to select the Chrome Browser option to make the conversion. Conversion via Chrome browser is much quicker and will look very different than the LaTeX rendition. The chrome browser version will look nearly the same as it does in your browser, while the LaTeX version looking more like a book/article. Consult nbconvert's documentation to learn how to get LaTeX installed correctly on your machine.","title":"PDF Conversion - LaTeX vs Chrome Browser"},{"location":"#more-features","text":"Below, is a description of other features from dataframe_image: Embeds all images from markdown cells (inline, reference, attachments, and <img> tags) into the pdf Saves the new documents anywhere in your filesystem and correctly link the resources Converts gifs to single-frame png files allowing them to be embedded into the pdf","title":"More features"},{"location":"#as-a-python-library","text":"dataframe_image can also be used outside of the notebook as a normal Python library. In a separate Python script, import the dataframe_image package and pass the file name of your notebook to the convert function. >>> import dataframe_image as dfi >>> dfi . convert ( 'path/to/your_notebook.ipynb' , to = 'pdf' , use = 'latex' , center_df = True , max_rows = 30 , max_cols = 10 , execute = False , save_notebook = False , limit = None , document_name = None , table_conversion = 'chrome' chrome_path = None , latex_command = None , output_dir = None , ) By default, the new file(s) will be saved in the same directory where the notebook resides. Do not run this command within the same notebook that is being converted.","title":"As a Python Library"},{"location":"#from-the-command-line","text":"The command line tool dataframe_image will be available upon installation with the same options as the convert function from above. dataframe_image --to = pdf \"my notebook with dataframes.ipynb\"","title":"From the Command Line"},{"location":"#finding-google-chrome","text":"You must have Google Chrome (or Brave) installed in order for dataframe_image to work. The path to Chrome should automatically be found. If Chrome is not in a standard location, set it with the chrome_path parameter.","title":"Finding Google Chrome"},{"location":"#using-matplotlib-instead-of-chrome","text":"If you do not have Chrome installed or cannot get it to work properly, you can alternatively use matplotlib to convert the DataFrames to images. Select this option by setting the table_conversion parameter to 'matplotlib' .","title":"Using matplotlib instead of Chrome"},{"location":"#publish-to-medium","text":"Closely related to this package is jupyter_to_medium , which publishes your notebooks directly and quickly as Medium blog posts.","title":"Publish to Medium"},{"location":"#dependencies","text":"You must have the following Python libraries installed: pandas nbconvert requests matplotlib BeautifulSoup aiohttp","title":"Dependencies"},{"location":"whats_new/","text":"What's New \u00b6 Version 0.1 \u00b6 Released July 20, 2020 Major New Features \u00b6 New option for downloading as pdf using chrome browser instead of LaTeX Export pandas DataFrame images directly with new export function Version 0.0.10 \u00b6 Released June, 2020 Genesis of dataframe_image - has the ability to download","title":"What's New"},{"location":"whats_new/#whats-new","text":"","title":"What's New"},{"location":"whats_new/#version-01","text":"Released July 20, 2020","title":"Version 0.1"},{"location":"whats_new/#major-new-features","text":"New option for downloading as pdf using chrome browser instead of LaTeX Export pandas DataFrame images directly with new export function","title":"Major New Features"},{"location":"whats_new/#version-0010","text":"Released June, 2020 Genesis of dataframe_image - has the ability to download","title":"Version 0.0.10"}]}